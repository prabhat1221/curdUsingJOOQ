/*
 * This file is generated by jOOQ.
 */
package com.jooq.crud.model.tables;


import com.jooq.crud.model.Keys;
import com.jooq.crud.model.Mydb;
import com.jooq.crud.model.tables.records.ProductTblRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductTbl extends TableImpl<ProductTblRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mydb.product_tbl</code>
     */
    public static final ProductTbl PRODUCT_TBL = new ProductTbl();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductTblRecord> getRecordType() {
        return ProductTblRecord.class;
    }

    /**
     * The column <code>mydb.product_tbl.id</code>.
     */
    public final TableField<ProductTblRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mydb.product_tbl.name</code>.
     */
    public final TableField<ProductTblRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>mydb.product_tbl.price</code>.
     */
    public final TableField<ProductTblRecord, Double> PRICE = createField(DSL.name("price"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>mydb.product_tbl.quantity</code>.
     */
    public final TableField<ProductTblRecord, Integer> QUANTITY = createField(DSL.name("quantity"), SQLDataType.INTEGER.nullable(false), this, "");

    private ProductTbl(Name alias, Table<ProductTblRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProductTbl(Name alias, Table<ProductTblRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mydb.product_tbl</code> table reference
     */
    public ProductTbl(String alias) {
        this(DSL.name(alias), PRODUCT_TBL);
    }

    /**
     * Create an aliased <code>mydb.product_tbl</code> table reference
     */
    public ProductTbl(Name alias) {
        this(alias, PRODUCT_TBL);
    }

    /**
     * Create a <code>mydb.product_tbl</code> table reference
     */
    public ProductTbl() {
        this(DSL.name("product_tbl"), null);
    }

    public <O extends Record> ProductTbl(Table<O> child, ForeignKey<O, ProductTblRecord> key) {
        super(child, key, PRODUCT_TBL);
    }

    @Override
    public Schema getSchema() {
        return Mydb.MYDB;
    }

    @Override
    public UniqueKey<ProductTblRecord> getPrimaryKey() {
        return Keys.KEY_PRODUCT_TBL_PRIMARY;
    }

    @Override
    public List<UniqueKey<ProductTblRecord>> getKeys() {
        return Arrays.<UniqueKey<ProductTblRecord>>asList(Keys.KEY_PRODUCT_TBL_PRIMARY);
    }

    @Override
    public ProductTbl as(String alias) {
        return new ProductTbl(DSL.name(alias), this);
    }

    @Override
    public ProductTbl as(Name alias) {
        return new ProductTbl(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductTbl rename(String name) {
        return new ProductTbl(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductTbl rename(Name name) {
        return new ProductTbl(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Double, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
