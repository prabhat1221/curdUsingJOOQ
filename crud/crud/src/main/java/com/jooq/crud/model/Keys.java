/*
 * This file is generated by jOOQ.
 */
package com.jooq.crud.model;


import com.jooq.crud.model.tables.Article;
import com.jooq.crud.model.tables.Author;
import com.jooq.crud.model.tables.Book;
import com.jooq.crud.model.tables.EmployeeTbl;
import com.jooq.crud.model.tables.PersonTbl;
import com.jooq.crud.model.tables.ProductTbl;
import com.jooq.crud.model.tables.records.ArticleRecord;
import com.jooq.crud.model.tables.records.AuthorRecord;
import com.jooq.crud.model.tables.records.BookRecord;
import com.jooq.crud.model.tables.records.EmployeeTblRecord;
import com.jooq.crud.model.tables.records.PersonTblRecord;
import com.jooq.crud.model.tables.records.ProductTblRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * mydb.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ArticleRecord> KEY_ARTICLE_PRIMARY = Internal.createUniqueKey(Article.ARTICLE, DSL.name("KEY_ARTICLE_PRIMARY"), new TableField[] { Article.ARTICLE.ID }, true);
    public static final UniqueKey<AuthorRecord> KEY_AUTHOR_PRIMARY = Internal.createUniqueKey(Author.AUTHOR, DSL.name("KEY_AUTHOR_PRIMARY"), new TableField[] { Author.AUTHOR.ID }, true);
    public static final UniqueKey<BookRecord> KEY_BOOK_PRIMARY = Internal.createUniqueKey(Book.BOOK, DSL.name("KEY_book_PRIMARY"), new TableField[] { Book.BOOK.ID }, true);
    public static final UniqueKey<EmployeeTblRecord> KEY_EMPLOYEE_TBL_PRIMARY = Internal.createUniqueKey(EmployeeTbl.EMPLOYEE_TBL, DSL.name("KEY_employee_tbl_PRIMARY"), new TableField[] { EmployeeTbl.EMPLOYEE_TBL.ID }, true);
    public static final UniqueKey<PersonTblRecord> KEY_PERSON_TBL_PRIMARY = Internal.createUniqueKey(PersonTbl.PERSON_TBL, DSL.name("KEY_person_tbl_PRIMARY"), new TableField[] { PersonTbl.PERSON_TBL.ID }, true);
    public static final UniqueKey<ProductTblRecord> KEY_PRODUCT_TBL_PRIMARY = Internal.createUniqueKey(ProductTbl.PRODUCT_TBL, DSL.name("KEY_product_tbl_PRIMARY"), new TableField[] { ProductTbl.PRODUCT_TBL.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ArticleRecord, AuthorRecord> AUTHER_ID = Internal.createForeignKey(Article.ARTICLE, DSL.name("AUTHER_ID"), new TableField[] { Article.ARTICLE.AUTHOR_ID }, Keys.KEY_AUTHOR_PRIMARY, new TableField[] { Author.AUTHOR.ID }, true);
}
