/*
 * This file is generated by jOOQ.
 */
package com.jooq.crud.model.tables;


import com.jooq.crud.model.Keys;
import com.jooq.crud.model.Mydb;
import com.jooq.crud.model.tables.records.EmployeeTblRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployeeTbl extends TableImpl<EmployeeTblRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mydb.employee_tbl</code>
     */
    public static final EmployeeTbl EMPLOYEE_TBL = new EmployeeTbl();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeeTblRecord> getRecordType() {
        return EmployeeTblRecord.class;
    }

    /**
     * The column <code>mydb.employee_tbl.id</code>.
     */
    public final TableField<EmployeeTblRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>mydb.employee_tbl.email</code>.
     */
    public final TableField<EmployeeTblRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>mydb.employee_tbl.fist_name</code>.
     */
    public final TableField<EmployeeTblRecord, String> FIST_NAME = createField(DSL.name("fist_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>mydb.employee_tbl.last_name</code>.
     */
    public final TableField<EmployeeTblRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(255), this, "");

    private EmployeeTbl(Name alias, Table<EmployeeTblRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmployeeTbl(Name alias, Table<EmployeeTblRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mydb.employee_tbl</code> table reference
     */
    public EmployeeTbl(String alias) {
        this(DSL.name(alias), EMPLOYEE_TBL);
    }

    /**
     * Create an aliased <code>mydb.employee_tbl</code> table reference
     */
    public EmployeeTbl(Name alias) {
        this(alias, EMPLOYEE_TBL);
    }

    /**
     * Create a <code>mydb.employee_tbl</code> table reference
     */
    public EmployeeTbl() {
        this(DSL.name("employee_tbl"), null);
    }

    public <O extends Record> EmployeeTbl(Table<O> child, ForeignKey<O, EmployeeTblRecord> key) {
        super(child, key, EMPLOYEE_TBL);
    }

    @Override
    public Schema getSchema() {
        return Mydb.MYDB;
    }

    @Override
    public Identity<EmployeeTblRecord, Long> getIdentity() {
        return (Identity<EmployeeTblRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EmployeeTblRecord> getPrimaryKey() {
        return Keys.KEY_EMPLOYEE_TBL_PRIMARY;
    }

    @Override
    public List<UniqueKey<EmployeeTblRecord>> getKeys() {
        return Arrays.<UniqueKey<EmployeeTblRecord>>asList(Keys.KEY_EMPLOYEE_TBL_PRIMARY);
    }

    @Override
    public EmployeeTbl as(String alias) {
        return new EmployeeTbl(DSL.name(alias), this);
    }

    @Override
    public EmployeeTbl as(Name alias) {
        return new EmployeeTbl(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeTbl rename(String name) {
        return new EmployeeTbl(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeTbl rename(Name name) {
        return new EmployeeTbl(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
