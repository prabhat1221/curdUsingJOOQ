/*
 * This file is generated by jOOQ.
 */
package com.jooq.crud.model.tables;


import com.jooq.crud.model.Keys;
import com.jooq.crud.model.Mydb;
import com.jooq.crud.model.tables.records.PersonTblRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PersonTbl extends TableImpl<PersonTblRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mydb.person_tbl</code>
     */
    public static final PersonTbl PERSON_TBL = new PersonTbl();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PersonTblRecord> getRecordType() {
        return PersonTblRecord.class;
    }

    /**
     * The column <code>mydb.person_tbl.id</code>.
     */
    public final TableField<PersonTblRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mydb.person_tbl.name</code>.
     */
    public final TableField<PersonTblRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    private PersonTbl(Name alias, Table<PersonTblRecord> aliased) {
        this(alias, aliased, null);
    }

    private PersonTbl(Name alias, Table<PersonTblRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mydb.person_tbl</code> table reference
     */
    public PersonTbl(String alias) {
        this(DSL.name(alias), PERSON_TBL);
    }

    /**
     * Create an aliased <code>mydb.person_tbl</code> table reference
     */
    public PersonTbl(Name alias) {
        this(alias, PERSON_TBL);
    }

    /**
     * Create a <code>mydb.person_tbl</code> table reference
     */
    public PersonTbl() {
        this(DSL.name("person_tbl"), null);
    }

    public <O extends Record> PersonTbl(Table<O> child, ForeignKey<O, PersonTblRecord> key) {
        super(child, key, PERSON_TBL);
    }

    @Override
    public Schema getSchema() {
        return Mydb.MYDB;
    }

    @Override
    public UniqueKey<PersonTblRecord> getPrimaryKey() {
        return Keys.KEY_PERSON_TBL_PRIMARY;
    }

    @Override
    public List<UniqueKey<PersonTblRecord>> getKeys() {
        return Arrays.<UniqueKey<PersonTblRecord>>asList(Keys.KEY_PERSON_TBL_PRIMARY);
    }

    @Override
    public PersonTbl as(String alias) {
        return new PersonTbl(DSL.name(alias), this);
    }

    @Override
    public PersonTbl as(Name alias) {
        return new PersonTbl(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PersonTbl rename(String name) {
        return new PersonTbl(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PersonTbl rename(Name name) {
        return new PersonTbl(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
